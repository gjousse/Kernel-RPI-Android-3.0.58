--- drivers/staging/android/binder.c
+++ drivers/staging/android/binder.c
@@ -49,6 +51,9 @@
 static uid_t binder_context_mgr_uid = -1;
 static int binder_last_id;
 
+static struct task_struct *binder_deferred_task;
+static DECLARE_WAIT_QUEUE_HEAD(binder_deferred_wq);
+
 static int binder_read_proc_proc(char *page, char **start, off_t off,
 				 int count, int *eof, void *data);
 
@@ -3083,36 +3097,42 @@
 		mutex_unlock(&binder_deferred_lock);
 
 		files = NULL;
-		if (defer & BINDER_DEFERRED_PUT_FILES) {
-			files = proc->files;
-			if (files)
-				proc->files = NULL;
-		}
 
-		if (defer & BINDER_DEFERRED_FLUSH)
-			binder_deferred_flush(proc);
+		if (proc != NULL) {
+
+			if (defer & BINDER_DEFERRED_PUT_FILES) {
+				files = proc->files;
+				if (files)
+					proc->files = NULL;
+			}
+
+			if (defer & BINDER_DEFERRED_FLUSH)
+				binder_deferred_flush(proc);
 
-		if (defer & BINDER_DEFERRED_RELEASE)
-			binder_deferred_release(proc); /* frees proc */
+			if (defer & BINDER_DEFERRED_RELEASE)
+				binder_deferred_release(proc); /* frees proc */
+		}
 
 		mutex_unlock(&binder_lock);
+
 		if (files)
 			put_files_struct(files);
-	} while (proc);
+
+	}
+
+	return 0;
 }
-static DECLARE_WORK(binder_deferred_work, binder_deferred_func);
 
 static void
 binder_defer_work(struct binder_proc *proc, enum binder_deferred_state defer)
 {
 	mutex_lock(&binder_deferred_lock);
 	proc->deferred_work |= defer;
-	if (hlist_unhashed(&proc->deferred_work_node)) {
+	if (hlist_unhashed(&proc->deferred_work_node))
 		hlist_add_head(&proc->deferred_work_node,
 				&binder_deferred_list);
-		schedule_work(&binder_deferred_work);
-	}
 	mutex_unlock(&binder_deferred_lock);
+	wake_up_interruptible(&binder_deferred_wq);
 }
 
 static char *print_binder_transaction(char *buf, char *end, const char *prefix,
